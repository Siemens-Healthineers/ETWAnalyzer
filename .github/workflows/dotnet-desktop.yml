# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

    build:

        runs-on: windows-latest  # For a list of available runner types, refer to
                                 # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on  
  
        strategy:
            matrix:
                onsystem:
                    - 'x64-windows'

                configuration: [Release]

        env:
            Solution_Name: ETWAnalyzer.sln

        steps:
       
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: GetStartTime
          run: |
            $startTime = [System.Diagnostics.Stopwatch]::GetTimestamp()
            "ProfilingStartTime=$startTime" >> $env:GITHUB_ENV
          shell: powershell

        # Download custom wpr Profile
        - name: Download and patch custom recording profile
          run: |
                curl https://raw.githubusercontent.com/Alois-xx/FileWriter/master/MultiProfile.wprp > MultiProfile.wprp
                # We need to remove the Strict="true" attribute in profile because in Azure some CPU counters 
                # are already monitored and wpr will complain even if we do not use a CPU counter recording profile. This is a bug in wpr.
                $var=(Get-Content -path MultiProfile.wprp -Raw);
                $replaced=$var.Replace('Strict="true"','');
                Write-Host $replaced
                Set-Content -Value $replaced -Path MultiProfile.wprp

        # Start Profilng
        - name: Start Profiling 
          run: |
                wpr -start MultiProfile.wprp!CSwitch -start MultiProfile.wprp!File -filemode
                
        # Install the .NET Core workload
        - name: Install .NET Core
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: 6.0.x

        # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
        - name: Setup MSBuild.exe
          uses: microsoft/setup-msbuild@v1.1

        # Print .NET information
        - name: Get .NET Information
          run: dotnet --info

        - name: Build Release
          run: dotnet build -c Release

        # Stop Profiling
        - name: Stop Profiling
          run: |
            $stopTime = [System.Diagnostics.Stopwatch]::GetTimestamp()
            $startStr = ${{ env.ProfilingStartTime }}
            echo StartStr $startStr
            $startTime = [System.Int64]::Parse($startStr)
            $runtimeMs = [System.TimeSpan]::FromTicks($stopTime-$startTime).TotalMilliseconds.ToString("F0")
            $date = Get-Date -format "yyyyMMdd-HHmmss"
            $fileName = "ProfilingData\BuildProfiling_$($runtimeMs)ms$($env:ComputerName).$($date).etl"
            mkdir ProfilingData
            mkdir Extract
            wpr -stop $fileName -skipPdbGen
            .\bin\Release\net6.0-windows\win-x64\ETWAnalyzer -extract all -fd $fileName -outdir Extract 
           
        # Start Test Profilng
        - name: Start Test Profiling 
          run: |
               $startTime = [System.Diagnostics.Stopwatch]::GetTimestamp()
               "ProfilingStartTime=$startTime" >> $env:GITHUB_ENV
               wpr -start MultiProfile.wprp!CSwitch -start MultiProfile.wprp!File -filemode
               
        # Execute all unit tests in the solution
        - name: Execute unit tests
          run: |
            dotnet test /nodeReuse:false -m:1 -p:ParallelizeTestCollections=false /p:CopyLocalLockFileAssemblies=true --logger GitHubActions --verbosity detailed --settings Test.runsettings --diag:log.txt --collect:"XPlat Code Coverage" --results-directory ./ults --logger trx
        
        # Stop Profiling
        - name: Stop Test Profiling
          run: |
            $stopTime = [System.Diagnostics.Stopwatch]::GetTimestamp()
            $startStr = ${{ env.ProfilingStartTime }}
            echo StartStr $startStr
            $startTime = [System.Int64]::Parse($startStr)
            $runtimeMs = [System.TimeSpan]::FromTicks($stopTime-$startTime).TotalMilliseconds.ToString("F0")
            $date = Get-Date -format "yyyyMMdd-HHmmss"
            "TestRunTimeMs=$($runtimeMs)ms_$($date)" >> $env:GITHUB_ENV
            $fileName = "ProfilingData\TestExecution_$($runtimeMs)ms$($env:ComputerName).$($date).etl"
            wpr -stop $fileName -skipPdbGen
            .\bin\Release\net6.0-windows\win-x64\ETWAnalyzer -extract all -fd $fileName -outdir Extract
            
        - name: Upload Profiling Data
          uses: actions/upload-artifact@v3
          with:
            name: ProfilingData_${{ env.TestRunTimeMs }}
            path: ProfilingData
            retention-days: 90

        - name: Upload Profiling Extract Data
          uses: actions/upload-artifact@v3
          with:
            name: Extract_${{ env.TestRunTimeMs }}
            path: Extract
            retention-days: 90

        - name: Upload as Artifact of Successful Test Results Reports + Code Coverage
          env:
            Solution_Name: ./tests

          uses: actions/upload-artifact@v3
          with:
            name: testresults
            path: ${{ env. Solution_Name }}
            retention-days: 90
          if: always()
          

