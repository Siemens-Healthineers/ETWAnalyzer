name: Build Profiling Example 

on:
  workflow_dispatch

jobs:

    build:

        runs-on: windows-latest  # For a list of available runner types, refer to
                                 # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on  
        steps:
       
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            
               
        # Download custom wpr Profile
        - name: Download and patch custom recording profile
          run: |
                curl https://raw.githubusercontent.com/Alois-xx/FileWriter/master/MultiProfile.wprp > MultiProfile.wprp
                # We need to remove the Strict="true" attribute in profile because in Azure some CPU counters 
                # are already monitored and wpr will complain even if we do not use a CPU counter recording profile. This is a bug in wpr.
                $var=(Get-Content -path MultiProfile.wprp -Raw);
                $replaced=$var.Replace('Strict="true"','');
                Write-Host $replaced
                Set-Content -Value $replaced -Path MultiProfile.wprp

        - name: GetStartTime
          run: |
            $startTime = [System.Diagnostics.Stopwatch]::GetTimestamp()
            # store start time in environment which is the github way to share variables between steps
            "ProfilingStartTime=$startTime" >> $env:GITHUB_ENV
          shell: powershell
          
          # Start Profilng
        - name: Start Profiling 
          run: |
                # We record into a file to capture everything.
                # Since extraction of a large ETL needs many GB of memory we can run out of memory so it is best
                # to split longer parts like build and test into separate files which are extracted separately
                wpr -start MultiProfile.wprp!CSwitch -start MultiProfile.wprp!File -filemode
                
        # Download ETWAnalyzer Binary
        - name: Download ETWAnalyzer
          run: |
                curl.exe -L  https://github.com/Siemens-Healthineers/ETWAnalyzer/releases/latest/download/ETWAnalyzer2.5.4.0_Net48.zip --output Analyzer.zip
                Expand-Archive -Path Analyzer.zip -DestinationPath .

        - name: Stop Profiling And Extract
          run: |
            $stopTime = [System.Diagnostics.Stopwatch]::GetTimestamp()
            $startStr = ${{ env.ProfilingStartTime }}
            $startTime = [System.Int64]::Parse($startStr)
            $runtimeMs = [System.TimeSpan]::FromTicks($stopTime-$startTime).TotalMilliseconds.ToString("F0")
            $date = Get-Date -format "yyyyMMdd-HHmmss"
            # store runtime to generate named artifacts
             "TestRunTimeMs=$($runtimeMs)ms_$($date)" >> $env:GITHUB_ENV
             
            # construct file name in format which is understood by ETWAnalyzer to later filter by testcase, test duration, ....
            # In general it is wise to add the timing to the file name so it is easier to verify if you are looking at the fast or slow file ... 
            $fileName = "ProfilingData\Build_$($runtimeMs)ms$($env:ComputerName).$($date).etl"
            
            mkdir ProfilingData > $null
            mkdir Extract > $null
            
             # Stop Profiling and save ETL file. If you are running .NET (4.8 and before) code you need to remove -skipPdbGen to get native image pdbs 
             # If you want to upload the pdb you need to store also the xxx.etl.NGENPDB folder to be able to resolve symbols for legacy .NET Framework applications
             wpr -stop $fileName -skipPdbGen
             
            # Extracted Json files are put into a sub folder Extract by default. You can override it with -outdir 
            .\ETWAnalyzer -extract all -fd $fileName -outdir Extract
            
        - name: Upload Profiling Extract Data
          uses: actions/upload-artifact@v3
          with:
            name: ExtractedETL_${{ env.TestRunTimeMs }}
            path: Extract
            retention-days: 90

        - name: Upload Full Profiling Data
          uses: actions/upload-artifact@v3
          with:
            name: ProfilingETL_${{ env.TestRunTimeMs }}
            path: ProfilingData
            retention-days: 90
